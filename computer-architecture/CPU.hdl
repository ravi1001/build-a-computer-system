/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
    Not(in=instruction[15], out=notInstructionMSB);
    Or(a=notInstructionMSB, b=instruction[5], out=loadA);
    And(a=instruction[15], b=instruction[4], out=loadD);
    ARegister(in=outMux1, load=loadA, out=outA, out[0..14]=addressM);
    PC(in=outA, reset=reset, load=loadPC, inc=true, out[0..14]=pc);
    Mux16(a=outA, b=inM, sel=instruction[12], out=outMux2);
    DRegister(in=outALU, load=loadD, out=outD);
    ALU(x=outD, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, zr=zrALU, ng=ngALU);
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[2], b=ngALU, out=outj1);
    And(a=instruction[1], b=zrALU, out=outj2);
    Not(in=zrALU, out=notzr);
    Not(in=ngALU, out=notng);
    And(a=notzr, b=notng, out=pos);
    And(a=instruction[0], b=pos, out=outj3);
    Or(a=outj1, b=outj2, out=outj1j2);
    Or(a=outj1j2, b=outj3, out=outj1j2j3);
    And(a=outj1j2j3, b=instruction[15], out=loadPC);
    Not(in=reset, out=notReset);
    Not(in=loadPC, out=notLoadPC);
    And(a=notReset, b=notLoadPC, out=incPC);
}